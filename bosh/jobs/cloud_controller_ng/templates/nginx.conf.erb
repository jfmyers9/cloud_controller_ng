# deployment cloudcontroller nginx.conf
daemon off;

<% if p("bpm.enabled") %>
error_log /var/vcap/sys/log/cloud_controller_ng/nginx-error.log <%= p("cc.nginx_error_log_level") %>;
pid       /var/vcap/data/cloud_controller_ng/nginx.pid;
<% else %>
error_log <%= p("cc.nginx_error_log_destination") %> <%= p("cc.nginx_error_log_level") %>;
pid       /var/vcap/sys/run/nginx_cc/nginx.pid;
<% end %>
error_log syslog:server=127.0.0.1,severity=error,tag=vcap_nginx_error <%= p("cc.nginx_error_log_level") %>;
worker_processes auto;

events {
  worker_connections  8192;
  use epoll;
}

http {
  include       mime.types;
  default_type  text/html;
  server_tokens off;

  log_format main  '<%= p("cc.nginx_access_log_format").chomp %>';

  <% if p("bpm.enabled") %>
    access_log  /var/vcap/sys/log/cloud_controller_ng/nginx-access.log  main;
  <% else %>
    access_log  <%= p("cc.nginx_access_log_destination") %>  main;
  <% end %>
  access_log  syslog:server=127.0.0.1,severity=info,tag=vcap_nginx_access main;

  sendfile             on;  #enable use of sendfile()
  tcp_nopush           on;
  tcp_nodelay          on;  #disable nagel's algorithm

  keepalive_timeout    <%= p("cc.server_keepalive_timeout") %> 20;

  <% if_p("cc.nginx_rate_limit_general") do %>
  limit_req_zone $http_authorization zone=all:10m rate=<%=p("cc.nginx_rate_limit_general")['limit'] %>;
  <% end %>

  <% if_p("cc.nginx_rate_limit_zones") do %>
    <% p("cc.nginx_rate_limit_zones").each do |zone| %>
  limit_req_zone $http_authorization zone=<%= zone['name'] %>:10m rate=<%= zone['limit'] %>;
    <% end %>
  <% end %>
  limit_req_status 429;

  client_max_body_size <%= p("cc.client_max_body_size") %>; #already enforced upstream/but doesn't hurt.

  client_body_temp_path /var/vcap/data/cloud_controller_ng/tmp/client_body_temp;
  proxy_temp_path       /var/vcap/data/cloud_controller_ng/tmp/proxy_temp;
  fastcgi_temp_path     /var/vcap/data/cloud_controller_ng/tmp/fastcgi_temp;
  uwsgi_temp_path       /var/vcap/data/cloud_controller_ng/tmp/uwsgi_temp;
  scgi_temp_path        /var/vcap/data/cloud_controller_ng/tmp/scgi_temp;

  upstream cloud_controller {
    <% if p("bpm.enabled") %>
    server unix:/var/vcap/data/cloud_controller_ng/cloud_controller.sock;
    <% else %>
    server unix:/var/vcap/sys/run/cloud_controller_ng/cloud_controller.sock;
    <% end %>
  }

  # This block ensures the endpoints it serves are handled by mutual TLS.
  # Refer to the 'return 403' statement in the http block to see how we secure those endpoints.
  server {
    listen <%= p("cc.tls_port") %> ssl;

    ssl_ciphers DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_certificate        /var/vcap/jobs/cloud_controller_ng/config/certs/mutual_tls.crt;
    ssl_certificate_key    /var/vcap/jobs/cloud_controller_ng/config/certs/mutual_tls.key;
    ssl_client_certificate /var/vcap/jobs/cloud_controller_ng/config/certs/mutual_tls_ca.crt;
    ssl_verify_client      on;
    ssl_verify_depth       2;
    ssl_protocols          TLSv1.2;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    server_name  _;
    server_name_in_redirect off;
    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>
    proxy_buffering             off;
    proxy_set_header            Host $host;
    proxy_set_header            X-Real_IP $remote_addr;
    proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect              off;
    proxy_connect_timeout       10;


    location /internal/v4/ {
      proxy_pass http://cloud_controller;
    }

    location ~ /internal/v3/staging/.*/(droplet_completed|build_completed) {
      proxy_pass http://cloud_controller;
    }

    location ~ /internal/v4/(droplets|buildpack_cache)/.*/upload {
      # Allow download the droplets and buildpacks
      if ($request_method = GET){
        proxy_pass http://cloud_controller;
      }

      # Allow large uploads
      client_max_body_size <%= p("cc.app_bits_max_body_size") %>; #already enforced upstream/but doesn't hurt.

      # Pass altered request body to this location
      upload_pass   @cc_uploads;

      # Store files to this directory
      upload_store /var/vcap/data/cloud_controller_ng/tmp/staged_droplet_uploads;

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "droplet_path" $upload_tmp_path;

      #on any error, delete uploaded files.
      upload_cleanup 400-505;
    }

    # Pass altered request body to a backend
    location @cc_uploads {
      proxy_pass http://cloud_controller;
    }
  }

  server {
  <% if p("cc.nginx.ip").empty? %>
    listen    <%= p("cc.external_port") %>;
  <% else %>
    listen    <%= p("cc.nginx.ip") %>:<%= p("cc.external_port") %>;
  <% end %>

    server_name  _;
    server_name_in_redirect off;
    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>

    location /internal/v4/ {
      return 403 'HTTPS is required';
    }

    # proxy and log all CC traffic
    location / {
      <% if p("bpm.enabled") %>
        access_log  /var/vcap/sys/log/cloud_controller_ng/nginx-access.log  main;
      <% else %>
        access_log  <%= p("cc.nginx_access_log_destination") %>  main;
      <% end %>
      access_log                  syslog:server=127.0.0.1,severity=info,tag=vcap_nginx_access main;
      proxy_buffering             off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Real_IP $remote_addr;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect              off;
      proxy_connect_timeout       10;
      proxy_pass                  http://cloud_controller;

      <% if_p("cc.nginx_rate_limit_general") do %>
      limit_req zone=all burst=<%= p("cc.nginx_rate_limit_general")['burst'] %> nodelay;
      <% end %>

      <% if_p("cc.nginx_rate_limit_zones") do %>
        <% p("cc.nginx_rate_limit_zones").each do |zone| %>
      location <%= zone['location'] %> {
        limit_req zone=<%= zone['name'] %> burst=<%= zone['burst'] %> nodelay;
        proxy_pass                  http://cloud_controller;
      }
        <% end %>
      <% end %>
    }

<% if p("cc.packages.blobstore_type").downcase == "fog" && p("cc.packages.fog_connection.provider", "").downcase == "local" %>
    # used for x-accel-redirect uri://location/foo.txt
    # nginx will serve the file root || location || foo.txt
    location <%= "/#{p('cc.packages.app_package_directory_key')}/" %> {
      internal;
      root   <%= p("cc.packages.fog_connection.local_root") %>;
    }
<% end %>

<% if p("cc.droplets.blobstore_type").downcase == "fog" && p("cc.droplets.fog_connection.provider", "").downcase == "local" %>
    # used for x-accel-redirect uri://location/foo.txt
    # nginx will serve the file root || location || foo.txt
    location <%= "/#{p('cc.droplets.droplet_directory_key')}/" %> {
      internal;
      root   <%= p("cc.droplets.fog_connection.local_root") %>;
    }
<% end %>

<% if p("cc.buildpacks.blobstore_type").downcase == "fog" && p("cc.buildpacks.fog_connection.provider", "").downcase == "local" %>
    # used for x-accel-redirect uri://location/foo.txt
    # nginx will serve the file root || location || foo.txt
    location <%= "/#{p('cc.buildpacks.buildpack_directory_key')}/" %> {
      internal;
      root   <%= p("cc.buildpacks.fog_connection.local_root") %>;
    }
<% end %>

    location ~ /v2/apps/[^/]+/bits {
      if ($arg_application_path) { return 422; }

      include public_upload.conf;

      upload_pass_args on;
      upload_pass_form_field "^resources$";
    }

    location ~ /v2/buildpacks/.*/bits {
      if ($arg_buildpack_path) { return 422; }

      include public_upload.conf;
    }

    location ~ /v2/apps/[^/]+/droplet/upload {
      if ($arg_droplet_path) { return 422; }

      include public_upload.conf;
    }

    location ~ /v3/packages/.*/upload {
      if ($arg_bits_path) { return 422; }

      include public_upload.conf;
    }


    location ~ /staging/(v3/)?(droplets|buildpack_cache)/.*/upload {
      # Allow download the droplets and buildpacks
      if ($request_method = GET){
        proxy_pass http://cloud_controller;
      }

      # Allow large uploads
      client_max_body_size <%= p("cc.app_bits_max_body_size") %>; #already enforced upstream/but doesn't hurt.

      # Pass along auth header
      set $auth_header $upstream_http_x_auth;
      proxy_set_header Authorization $auth_header;

      # Pass altered request body to this location
      upload_pass   @cc_uploads;

      # Store files to this directory
      upload_store /var/vcap/data/cloud_controller_ng/tmp/staged_droplet_uploads;

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "droplet_path" $upload_tmp_path;

      #on any error, delete uploaded files.
      upload_cleanup 400-505;
    }

    # Pass altered request body to a backend
    location @cc_uploads {
      proxy_pass http://cloud_controller;
    }

    location ~ ^/internal_redirect/(.*){
      # only allow internal redirects
      internal;

      set $download_url $1;

      #have to manualy pass along auth header
      set $auth_header $upstream_http_x_auth;
      proxy_set_header Authorization $auth_header;

      # Download the file and send it to client
      proxy_pass $download_url;
    }

    location /nginx_status {
      stub_status on;
      access_log  /var/vcap/sys/log/cloud_controller_ng/nginx_status.access.log main;
      allow 127.0.0.1;
      deny all;
    }
  }
}
